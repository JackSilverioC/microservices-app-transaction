services:
  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      retries: 3
      start_period: 60s
    volumes:
      - mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jack
      - MONGO_INITDB_ROOT_PASSWORD=12345
    networks:
      - my-network

  mongo-express:
    container_name: mongo_express
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=jack
      - ME_CONFIG_MONGODB_ADMINPASSWORD=12345
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - my-network


  ms-client:
    container_name: ms-client
    build: ./services/ms-cliente
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jack
      - SPRING_DATA_MONGODB_PASSWORD=12345
      - MONGO_HOST=mongodb  # Referencia al servicio de MongoDB
    ports:
      - "8050:8050"
    depends_on:
      ms-config-server:
        condition: service_healthy
    networks:
      - my-network


  ms-debitcard:
    container_name: ms-debitcard
    build: ./services/ms-debitcard
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jack
      - SPRING_DATA_MONGODB_PASSWORD=12345
      - MONGO_HOST=mongodb  # Referencia al servicio de MongoDB
      - WEBCLIENT_BASE_URL=http://ms-client:8050/clients
      - KAFKA_BOOTSTRAP_SERVER=ms_kafka:9092
    ports:
      - "8060:8060"
    depends_on:
      ms-config-server:
        condition: service_healthy
    networks:
      - my-network


  ms-transaction:
    container_name: ms-transaction
    build: ./services/ms-transaction
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=jack
      - SPRING_DATA_MONGODB_PASSWORD=12345
      - MONGO_HOST=mongodb  # Referencia al servicio de MongoDB
      - WEBCLIENT_BASE_URL=http://ms-debitcard:8060/debitcards
      - KAFKA_BOOTSTRAP_SERVER=ms_kafka:9092
    ports:
      - "8070:8070"
    depends_on:
      ms-config-server:
        condition: service_healthy
    networks:
      - my-network

  ms-config-server:
    container_name: ms-config-server
    build: ./services/config-server
    restart: always
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      retries: 3
      start_period: 30s
    networks:
      - my-network

  discovery-server:
    container_name: discovery-server
    build: ./services/discovery-server
    restart: always
    ports:
      - "8761:8761"
    depends_on:
      ms-config-server:
        condition: service_healthy
    networks:
      - my-network


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms_kafka:9092
    networks:
      - my-network


volumes:
  mongo:
networks:
  my-network:
    driver: bridge